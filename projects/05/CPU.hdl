/https://cdn.discordapp.com/attachments/163382741491122176/961917356022591528/277997261_428207459069435_3729968371442290569_n.mp4/ This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

	// instruction extractor
	Mux16(
		a=false,
		b=instruction,
		sel=instruction[15],
		out[0]=cJGT,
		out[1]=cJEQ,
		out[2]=cJLT,
		out[3]=cDestM,
		out[3]=writeM,
		out[4]=cDestD,
		out[5]=cDestA,
		out[6]=cNO,
		out[7]=cF,
		out[8]=cNY,
		out[9]=cZY,
		out[10]=cNX,
		out[11]=cZX,
		out[12]=cAOrM,
		out[15]=cType);

	// A Register logic
	Mux16(a=aRegOut,b=inM,sel=cAOrM,out=yIn);
	Mux16(a=instruction,b=aluOut,sel=cType,out=aRegIn);
	
	// Loading the A Register
	Not(in=cType,out=notCType);
	Or(a=notCType,b=cDestA,out=loadA);
	ARegister(in=aRegIn,load=loadA,out=aRegOut,out[0..14]=addressM);

	// Loading the D Register from the output of the ALU
	DRegister(in=aluOut,load=cDestD,out=xIn);
	
	// Main ALU logic
	ALU(x=xIn,y=yIn,zx=cZX,nx=cNX,zy=cZY,ny=cNY,f=cF,no=cNO,out=aluOut,out=outM,zr=zerop,ng=negp);
	
	// PC logic	
	Not(in=zerop,out=notzerop);
	Not(in=negp,out=notnegp);
	And(a=notzerop,b=notnegp,out=posp);

	And(a=cJLT,b=negp,out=and1);
	And(a=cJEQ,b=zerop,out=and2);
	And(a=cJGT,b=posp,out=and3);

	Or(a=and1,b=and2,out=or1);
	Or(a=or1,b=and3,out=pcLoad);

	PC(in=aRegOut,load=pcLoad,inc=true,reset=reset,out[0..14]=pc);
}	
